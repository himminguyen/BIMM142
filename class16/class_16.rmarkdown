---
title: "class 16: Analyzing Sequencing Data in the Cloud"
author: "Jimmi"
format: pdf
---


# Downstream Analysis

With each sample having its own directory containing the Kallisto output, we can import the transcript count estimates into R using:


```{r}
library(tximport)

# setup the folder and filenames to read
folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)
```


We now have our estimated transcript counts for each sample in R. We can see how many transcripts we have for each sample:


```{r}
colSums(txi.kallisto$counts)
```


And how many transcripts are detected in at least one sample:


```{r}
sum(rowSums(txi.kallisto$counts)>0)
```


Before subsequent analysis, we might want to filter out those annotated transcripts with no reads:


```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]
```


And those with no change over the samples:


```{r}
keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```



## Principle Component Analysis

We can now apply any exploratory analysis technique to this counts matrix. As an example, we will perform a PCA of the transcriptomic profiles of these samples. Now we compute the principal components, centering and scaling each transcriptâ€™s measured levels so that each feature contributes equally to the PCA:


```{r}
pca <- prcomp(t(x), scale=TRUE)

summary(pca)
```


Now we can use the first two principal components as a co-ordinate system


```{r}
plot(pca$x[,1], pca$x[,2],
     col=c("blue","blue","red","red"),
     xlab="PC1", ylab="PC2", pch=16)
```


>Q. Use ggplot to make a similar figure of PC1 vs PC2 and a seperate figure PC1 vs PC3 and PC2 vs PC3.


```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```


## Differential-expression analysis

We can use DESeq2 to complete the differential-expression analysis that we are already familiar with:


```{r, warning=FALSE, results='hide', message=FALSE}
library(DESeq2)
```

```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```

```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```


using counts and average transcript lengths from tximport


```{r}
dds <- DESeq(dds)

res <- results(dds)
head(res)
```


These results could go on to be visualized and subjected to pathway analysis.








